
### Visualization Links

These are handy links and ideas for the tutorials, mainly in week 1 and 2, which make plots. Many of the current plots are not that impressive.

http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
https://cran.r-project.org/web/packages/ggside/vignettes/ggside_basic_usage.html

Tidy Tuesday: https://github.com/rfordatascience/tidytuesday

Overview of the tutorial at the start. What functions are we covering? How do the sections related to each other? How many sections are there? How do they relate to each other? How does this tutorial relate to the other tutorials this week's?

Start providing the titles and subtitles in the question so that students could copy/paste them.

Put at the start and in the middle how long the tutorial is.

### Priorities

### Yuhan

Various tutorials

#### Nuo Wen Lei

* Do we need packages like learnr and primer.data to be listed in Imports given that we must (?) have their location in remotes?

* Add three paragraphs of comments explaining why you know (and what you think) about why testing with session objects is so difficult, and why you took the approach you did. And explain what you might investigate/test if you were going to tackle this again.

* Document get_submissions_from_learnr_session thoroughly.

* Double check order is not section-1, section-10, section-11, section-2, section-3.

* Create a function, build_rds, which does the same thing as build_html.


* Record the knowledge in details.Rmd that you learned from the professional community. Link to the Issue thread. Link to that weird "zero space" post. Add discussion of the problems with ``r'' (or whatever that thing is). Note how we "solved" this with images. FIX THE DRAFT.


* Test cases build_rds.

* Where do we put a version number of some kind, or a date of build?

* Explore making hundreds of breakout rooms with screen sharing on Discord. Outline the entire proceedure for how we organize a class with 200+ students. Perhaps useful: https://devpost.com/software/breakout-bot. Create new document, vignettes/class_management.Rmd, which covers start-to-finish how to manage this class on Discord.

https://top.gg/bot/400724460203802624

Important Commands:

- !ymove: Distribute people to breakout rooms (voice channels)

- !rmove: Call people back to current room (voice channel)

* How should we test the Submit functionality?


* How do we process tutorial submissions in a sensible way? First, how we should collect them together? gmail account? Google form? An R package for submitting stuff? Second, how do we process them? Presambly, we will start with a directory in which they all exist. (Not worrying yet about duplicate names.) Then we have an R script which takes a directory and produces a sheet with one row for each student. Sheet starts with five colums: last name, first name, count of how many questions you answered, total time spent and a link to her html file. That is enough for this summer.

- automatic gmail attachment processing with google apps script?
http://www.googleappsscript.org/home/fetch-gmail-attachment-to-google-drive-using-google-apps-script

* Create a document, assignment_management.Rmd, which outlines the recommended procedure. First step is create a fake Google account.

* Mystery of permanent objects. Maybe solved with new version. Was only a problem in creating an object which we wanted to be available to students in an Exercise code chunk. Never a problem for a plot which we create and then show students two or more times.

* Explore switching to brms. First, read and understand chapter 7 sections on Courage and Temperance to see how we use rstanarm::stan_glm(). Second, check out brms: https://paul-buerkner.github.io/brms/. Example (maybe!):

fit_obj <- brm(height ~ 1,
            data = nhanes, family = gaussian())

Does it take too long too compile? Big concern is how things work on Windows.

* Enhancement suggestion for the tutorials: Make cells, submit, and continue buttons tab-able.

* When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.


* What is up with this note?

````
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.
````

* Discuss "Items to add to our testing process" below"

* Update Technical Details document. It is filled with nonsense!

### Tutorials to add

* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.

* A "models" which would be a full dry run of their final projects. Download some data (maybe lots of little data files) with an R script. Clean the data in other R script. Make the model (a simple two parameter model) in another R script. Then, make a distill package which uses the model to make pretty pictures which answer a couple of questions. Should show results using gtsummary to make pretty tables of model results. Might even show how stan_glm() models differ from lm() models. Or maybe run stan_glm() with option to get the lm() results. Example usage: https://ipums.github.io/pma-data-hub/posts/2021-07-01-covid-tables/

* Advanced plotting, ideally focussed on all a variety of different plotting approaches designed for modeling-type questions and answers. Maybe https://feddelegrand7.github.io/ddplot/.

* Would it be possible to have tutorials in the last few weeks which were, more or less, final project check-ins . . .


* A tutorial about working with textual data. Perhaps based on tidytext book. Also: https://datavizs21.classes.andrewheiss.com/example/13-example/


* An rtweet tutorial: https://github.com/ropensci/rtweet


### To discuss

* Another example set: https://openintrostat.github.io/ims-tutorials/

* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable. Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/

* Is there some way to ensure that all the answers we have for each question --- including complete answers we provide in hints --- work correctly. For example, if a input csv file becomes corrupted, how will we catch that?


* Another way to host the tutorials: https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/


* Plots in visualization-D with vertical lines for 2* mad .

* mention iter = 10000

## Items to add to our testing process

* Is there a way to add a test which confirms that none of the code chunk names are duplicated? Is that useful/ncessary?

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* Can we use knitr::purl() to create .R files which might then become part of our testing process?

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way to get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them. Best would be to add an option so that students can choose either rds or PDF.

### To explore later

* Consider this framework: https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.





### Allison Horst interview

The main question was: How do we incorporate tutorial questions directly into the chapter itself? Allison is the world expert on this topic.

* She is concerned about user loads for published Shiny apps - would recommend that we use the basic or higher plan.

* She thinks using Desiree's method of embedding one exercise at a time might get unreasonable for a book of our size, but suggested that we could host 12 different ShinyApps corresponding to each chapter, and then link to each chapter in one central location. (Kind of like the combined tutorials app Evelyn created via HMDC.)

* How did you decide which exercises were going to be "tutorials" and which would be "exercises"? She wanted the exercises to be incremental, so a lot of the code was already pre-populated. The exercises that were blank built directly off of code that was already shown before, so that students could have an "easy win" by just copying the previous code and tweaking a variable name. Allison thinks that this incremental process is important for beginner R students.

* How much memory does the ShinyApp consume? Do you know of any tricks to make learnr tutorials smaller? She recommends that we contact the team at RStudio Education - this is not her area of expertise. Allison says that the RStudio Education team is super eager to hear about learnr use cases, would be happy to talk to us, and would even ask us to write a blog post. She also mentioned that the team would know the most about cutting-edge learnr stuff, including things like a "completion rate" bar that shows students how far they are through a tutorial.

* Any tips for remote teaching or learning? Using learnr at all is a big step. Allison also pre-records short versions of her lectures for her students to stream at a later time,  and holds smaller discussion sections in class where they do activities.

* Allison's #1 Recommendation to remote teachers of R: Having students start out with RStudio Cloud and then transitioning to Desktop. You can set up workspaces so the necessary packages are already loaded and installed, any script is already pre-loaded, and all students need to do is log in. It looks exactly the same as RStudio Desktop except folks don't have to worry about installing R or RStudio. You can push/pull from git in RStudio Cloud as well (link to a Rstudio cloud tutorial/article: https://rstudio.com/resources/webinars/teaching-r-online-with-rstudio-cloud/)



