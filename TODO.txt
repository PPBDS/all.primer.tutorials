# Planning for Tutorials

Data is not representative if there is a correlation between missingness --- the probability that a data row is not available --- and other stuff, especially the outcome variable.

### Random thoughts

OK to have some tutorials which are shorter than the typical 90 minutes. After all, the basic material in something like a census or help tutorial might only require 60 (or even 30) minutes. And that is OK!

Put the Census tutorial in week 3. We only have 4 tutorials that week and it makes sense to include this in the Data week.

Maybe put mapping in week 4. There are not too many other topics to cover. And this location is "close enough" to week 3 that we can direct students to do it even in a three week course.

All this frees up more room in week 5, when we have lots of probability and bias examples to cover.

### Visualization Links

These are handy links and ideas for the tutorials, mainly in week 1 and 2, which make plots. Many of the current plots are not that impressive.

http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
https://cran.r-project.org/web/packages/ggside/vignettes/ggside_basic_usage.html

Add to chapter 5 a tutorial whose sole focus is distributions. First part of this is going slowly through the process by which counts can be turned into percentages. Do this in, at least, five ways. First, with geom_bar() which (I think) does the counting for us. Second, with geom_col(), in which we need to create the counts ourselves. Third with geom_histogram(). Fourth then maybe create a histogram by hand, using cut() and then counting up the elements in each range.



### Week 5

Do a full scale project from start to finish which uses census data to make some maps and a cool looking table. See the current Maps appendix for a place to start. This tutorial might have slightly longer descriptions than other tutorials. It might be more stand-alone, thereby allowing us to get rid of the appendix.

* A "census" tutorial which covers all the relevant material in the maps tutorial, but no mapping. Note that the new (dev) version of tidycensus makes it much easier to get millions of rows of ACS data.

* A "map" tutorial which starts by assuming the existence of the needed map data and then does the same map plots as in the appendix.

* A "help" tutorial which covers all aspects of finding help. Start with the reprex package. Make the reprex in a .R file and show that file as you make progress. Perhaps make a bad reprex first, one which leaves out the library(tidyverse) calls. Also the R package which searches all packages on CRAN. https://www.zuckarelli.de/packagefinder/tutorial.html (Maybe add something about searching Github to help, which I don't know how to do well.)


### Week 6

*Week 6* we could do "projects," which would cover more ground in terms of putting together projects with lots of files. Cover the **here** package. And maybe other topics from https://rstats.wtf/.  Should certainly cover the .Rprofile file. Have examples of changing it, adding a print statement, restarting R, seeing the print statement (and copy/pasting what you see as proof). Always using the **usethis** commands. 

Perhaps also discuss the .Renviron file. Maybe some (fake?) examples of issues associated with (not) using :: to identify the package from which you want the function to come. 

Perhaps we save gists for this tutorial. Don't want RStudio and friends to be too long.

Maybe also discuss base R versus tidyverse so that students are not confused when they see base R. Have a tutorial for this. Maybe there is a week 4 tutorial which covers all the random R topics we failed to cover before.

What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?


### Later weeks

Week 7 could do "models" which would be a full dry run of their final projects. Download some data (maybe lots of little data files) with an R script. Clean the data in other R script. Make the model (a simple one parameter model) in another R script. Then, make a distill package which uses the model to make pretty pictures which answer a couple of questions.

Week 7. Do example where we select years for which we have complete data. With that, we can calculate a true beta. Then, pretend it is 1950. Lots of governors are still alive! Recalculate the beta with just the values for the dead ones. This will give you the wrong answer, and you know just how wrong it was. Maybe this is already included in current tutorials.

Could also do a tutorial which showed using gtsummary to make pretty tables of model results. Might even show how stan_glm() models differ from lm() models. Or maybe run stan_glm() with option to get the lm() results. Example usage: https://ipums.github.io/pma-data-hub/posts/2021-07-01-covid-tables/

Week 8 could be super advanced plotting, ideally focussed on all a variety of different plotting approaches designed for modeling-type questions and answers. Maybe https://feddelegrand7.github.io/ddplot/. 

Would it be possible to have tutorials in the last few weeks which were, more or less, final project check-ins . . .


### Priorities

### Yuhan

There should be a tutorial which sets up a situation with the train experiment and then asks you to make some inferences. Maybe this begins with permutation tests.

What happens when our assumptions are violated?

Setting the stage for sampling?

Using the material in RCM to reinforce key points? Assignment mechanism. Sampling maechanism. Missing data mechanism.

Set the stage unrepresentativeness. 

Set the stage for the use of the error term.


#### Nuo Wen Lei

* Submit Issue to parsermd with reproducible example of problem. Email me link when you do.

* Email any author of a problematic tutorial to let them know about the issue. (Might be only Anmay.) DO THIS NOW!

* Test case of tutorial.Rmd which fails because it includes ``r'' (or whatever that thing is). Perhaps easiest way is something like test-components which ensures that ``r'' is not present. Or, better, run parsermd on every tutorial to ensure it works. 

* Put into details.Rmd the stuff about settings.dcf and the set cache = FALSE trick. Why we need it? What it does?

* Check to see if R CMD check is passing now.

* Explore making hundreds of breakout rooms with screen sharing on Discord. Some "bot" thing? Maybe: https://devpost.com/software/breakout-bot. Write it down here:


* Why is pkgdown check failing in primer.tutorials? See: https://github.com/PPBDS/primer.tutorials/actions. Cause seems to be new renv version, but why should we care? Maybe need to make yml for pkgdown look more like that for R CMD check, at least with respect to renv? Might as well also update to 4.1.0. Maybe reach out to Nosa, who just submittted a (related?) PR to primer. Check out:

https://github.com/PPBDS/primer/pull/163/files

Email Nosa and set up a time to chat.

* Fix this?

> library(primer.tutorials)
Warning: changing locked binding for ‘question_ui_initialize.learnr_text’ in ‘learnr’ whilst loading ‘primer.tutorials

* How do we process tutorial submissions in a sensible way? First, how we should collect them together? gmail account? Google form? An R package for submitting stuff? Second, how do we process them? Presambly, we will start with a directory in which they all exist. (Not worrying yet about duplicate names.) Then we have an R script which takes a directory and produces a sheet with one row for each student. Sheet starts with five colums: last name, first name, count of how many questions you answered, total time spent and a link to her html file. That is enough for this summer. 

* Mystery of permanent objects. Maybe solved with new version. Was only a problem in creating an object which we wanted to be available to students in an Exercise code chunk. Never a problem for a plot which we create and then show students two or more times.

* Explore switching to brms. First, read and understand chapter 7 sections on Courage and Temperance to see how we use rstanarm::stan_glm(). Second, check out brms: https://paul-buerkner.github.io/brms/. Example (maybe!):

fit_obj <- brm(height ~ 1, 
            data = nhanes, family = gaussian())

Does it take too long too compile? Big concern is how things work on Windows.

* Enhancement suggestion for the tutorials: Make cells, submit, and continue buttons tab-able. 



### Tutorials to add


* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.



* An rtweet tutorial: https://github.com/ropensci/rtweet

* A permutation tests tutorial.





### To discuss

* Another example set: https://openintrostat.github.io/ims-tutorials/

* Is there a way to add a test which confirms that none of the code chunk names are duplicated? Is that useful/ncessary?

* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable. Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/

* Is there some way to ensure that all the answers we have for each question --- including complete answers we provide in hints --- work correctly. For example, if a input csv file becomes corrupted, how will we catch that?

* Is there a way to confirm that all the files we need --- because we file.copy() them --- actually exist? Can we change behavior of file.copy() so that it produces a warning if the file is not there.



* Another way to host the tutorials: https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/

* How do we test just one tutorial.Rmd. Using "Run Document"", although it willl catch some problems, does not catch everything. Using "Check" works, but it takes forever because we have too many tutorials. There must be something we can do from the Console. But this might be tricky! Don't forget the (important?) distinction between raw .Rmd files and installed tutorials.


* Process all rds tutorial answer files and organize the results.

* When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.


* What is up with this note?

````
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.
````

* Plots in visualization-D with vertical lines for 2* mad .



* mention iter = 10000

## Items to add to our testing process

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* Can we use knitr::purl() to create .R files which might then become part of our testing process?

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way to get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them. Best would be to add an option so that students can choose either rds or PDF.

### To explore later

* Consider this framework: https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials. Maybe we need a script which finds the current version of these standard sections, deletes them, and then replaces them with the official version? Or maybe just using Find in Files and then global replace is enough . . .


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.

## .Rbuildignore

.Rbuildignore gives me a bunch of problems. I think that the core issue is that `#` as comment character does not work. But it also does not always break nicely! For unknown reasons, adding some comments caused all the files in `inst/www` to not be  included in the build. Since `inst/www` was empty, the `www` folder was not included in the tarball. This, of course, caused all sorts of other failures. I think the key issue is that using `*` (or maybe a parenthesis) in a line which begins with `#` causes trouble.

Anyway, we would like to ensure that all the junk files which end up in the `tutorials/*` directories are not included in the build. Such files are often large. They also run the risk of messing things up in that they might cause certain tests to pass for us but which would fail for anyone who downloads from Github. (The .gitignore does a reasonable ensuring that such files do not end up on Github.)

The two tutorial* lines currently in .Rbuildignore do some good, I think. But what I really want to specify is that only files named tutorial.Rmd are allowed into the build. (Or maybe just those files plus some specified ones which are used to store rds objects used by the tutorials.) I don't know how to do this.

If you are using a new library, there are several things you need to check. First, most obviously, you should install the package within the primer.tutorials directory. Second, you must use library(X) in the setup chunk within the tutorial.Rmd itself. Third, you need to run renv::status(). This should report that there is a new package which is not part of renv.lock. You will need to run, renv::snapshot() so that renv.lock is updated. Fourth, you need to add the package to the DESCRIPTION file, in the Imports: section. (And don't forget the comma when you do so.) If you don't do this, then R CMD check might work on your computer, where library X is already installed, but won't work in the cloud since R relies on the DESCRIPTION file to know what packages to install.

### Allison Horst

The main question was: How do we incorporate tutorial questions directly into the chapter itself? Allison is the world expert on this topic.

* She is concerned about user loads for published Shiny apps - would recommend that we use the basic or higher plan.

* She thinks using Desiree's method of embedding one exercise at a time might get unreasonable for a book of our size, but suggested that we could host 12 different ShinyApps corresponding to each chapter, and then link to each chapter in one central location. (Kind of like the combined tutorials app Evelyn created via HMDC.)

* How did you decide which exercises were going to be "tutorials" and which would be "exercises"? She wanted the exercises to be incremental, so a lot of the code was already pre-populated. The exercises that were blank built directly off of code that was already shown before, so that students could have an "easy win" by just copying the previous code and tweaking a variable name. Allison thinks that this incremental process is important for beginner R students.

* How much memory does the ShinyApp consume? Do you know of any tricks to make learnr tutorials smaller? She recommends that we contact the team at RStudio Education - this is not her area of expertise. Allison says that the RStudio Education team is super eager to hear about learnr use cases, would be happy to talk to us, and would even ask us to write a blog post. She also mentioned that the team would know the most about cutting-edge learnr stuff, including things like a "completion rate" bar that shows students how far they are through a tutorial.

* Any tips for remote teaching or learning? Using learnr at all is a big step. Allison also pre-records short versions of her lectures for her students to stream at a later time,  and holds smaller discussion sections in class where they do activities.

* Allison's #1 Recommendation to remote teachers of R: Having students start out with RStudio Cloud and then transitioning to Desktop. You can set up workspaces so the necessary packages are already loaded and installed, any script is already pre-loaded, and all students need to do is log in. It looks exactly the same as RStudio Desktop except folks don't have to worry about installing R or RStudio. You can push/pull from git in RStudio Cloud as well (link to a Rstudio cloud tutorial/article: https://rstudio.com/resources/webinars/teaching-r-online-with-rstudio-cloud/)
